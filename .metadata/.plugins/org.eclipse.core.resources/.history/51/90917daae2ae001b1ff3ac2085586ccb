package com.kosta.sample5AOP;

import org.aopalliance.intercept.MethodInterceptor;
import org.aopalliance.intercept.MethodInvocation;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;

// Advice : 보조업무

@Component	//bean으로 만듦
@Aspect 	// PointCut, Advice를 여기에 다 넣음
public class LoggingAdvice {
	
	@Pointcut("execution(* add(..))")
	public void targetMethod() {	// 함수 이름은 사용자가 정한다.
		
	}
	
	public Object arroundMethod(ProceedingJoinPoint joinPoint) throws Throwable {
		String methodName = joinPoint.getSignature().getName();
		System.out.println("[메서드 호출 전 : LogginAdvice");
		System.out.println(methodName + "메서드 호출 전");	// 주업무의 함수 이름 얻기

		Object object = joinPoint.proceed();	// 주업무를 수행

		System.out.println("[메서드 호출 후 : loggingAdvice");	// 주업무 아래에 들어와서 보조업무 수행
		System.out.println(methodName + "메서드 호출 후");
		return object;	// 주업무 수행 결과를 return
	}
}

