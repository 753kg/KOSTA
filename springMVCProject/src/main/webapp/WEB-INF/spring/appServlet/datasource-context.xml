<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	
	<!-- DB -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> <!-- 환경설정했던 정보를 읽는다 --> 
		<property name="locations">
			<list>
				<value>classpath:/oracledb.properties</value>
			</list>
		</property>
	</bean>
	  
	<!-- 방법 1
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	 -->
	 
	 <!-- 방법 2 
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	-->
	
	<!-- 방법3 Mybatis Connection Pool
	<bean id="dataSource" class="org.apache.ibatis.datasource.pooled.PooledDataSource">
		<property name="driver" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	 -->
	 
	 <!-- 방법 4 서드파티(apache dbcp) Connection Pool 
	<bean id="dataSource"
		class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	 -->
	 
	<!-- 방법 5 JNDI -->
	<!-- context.xml에 있는 resource를 참조 -->
	<jee:jndi-lookup id="dataSourceOriginal" jndi-name="jdbc/myoracle" resource-ref="true"/>
	
	<!-- DB 연결 소스(dataSourceOriginal)를 가져와서 거기에 log를 추가 -->
	<bean id="dataSource"  class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<constructor-arg ref="dataSourceOriginal" />
		<property name="logFormatter">
			<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
				<property name="loggingType" value="MULTI_LINE"></property>
				<property name="sqlPrefix" value="[ SQL문장 ] "></property>
			</bean>
		</property>
	</bean>
	 
	<!-- JDBC Template -->
	<!-- JdbcTemplate의 setDataSource에 위에서 만든 dataSource를 넣음 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- MyBatis -->
	<!-- sqlSessionFactory : sqlSession을 만들어 주는 역할 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:mybatis/sqlConfig.xml" />
		<property name="mapperLocations" value="classpath:mybatis/mappers/*Mapper.xml" />
	</bean>
	
	<!-- sqlSession : sql문장 실행 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"></constructor-arg>
	</bean>
	
	<!-- Transaction bean 생성 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- Transaction 관련 annotation 찾아줌 -->
	<!-- proxy-target-class="true" : 인터페이스 없이 class에 직접 적용되는 proxy -->
	<tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager"/>
	
	<!-- Transaction 방법2 : AOP 이용 -->
	<tx:advice id="txAdvice"  transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<aop:config>
    	<aop:advisor advice-ref="txAdvice"  pointcut="execution(* insertUpdate(..))" />
	</aop:config>
		
	
	
</beans>
