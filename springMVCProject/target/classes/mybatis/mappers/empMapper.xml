<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kosta.emp">

  <!-- DB 컬럼 이름과 VO 이름이 다를 때 -->
  <!-- 이름 다른 것만 써 놓으면 안 쓴 나머지는 그대로 쓸 수 있음 -->
  <resultMap type="evo" id="empResult">
    <result property="employee_id" column="employee_id"/>
    <result property="first_name" column="first_name"/>
  </resultMap>

  <!-- #{} : map의 key 이름 -->
  <select id="loginChk" resultType="evo" parameterType="map">
  	select * from employees where employee_id = #{employee_id} and email = #{email}
  </select>

  <select id="selectAll" resultMap="empResult">
    select * from employees order by 1
  </select>
  
  <select id="selectAllJobs" resultType="com.kosta.model.JobVO">
  	select * from jobs order by 1
  </select>
  
  <select id="selectById" resultType="evo" parameterType="int">
  	select * from employees where employee_id = #{employee_id}
  </select>
  
  <select id="selectByDept" resultType="evo" parameterType="int">
  	select * from employees where department_id = #{department_id}
  </select>
  
  <select id="selectByJob" resultType="evo" parameterType="int">
  	select * from employees where job_id = #{job_id}
  </select>
  
  <select id="selectBySalary" resultType="evo" parameterType="map">
  	select * from employees where salary between #{minsal} and #{maxsal}
  </select>
  
  <select id="selectByDate" resultType="evo" parameterType="map">
  	select * from employees where hire_date between #{sdate} and #{edate}
  </select>
  
  <select id="selectByDate2" resultType="evo" parameterType="map">
  	select * from employees where hire_date between #{sdate} and #{edate}
  </select>
  
  <select id="selectByName" resultType="evo" parameterType="string">
  	select * from employees where first_name like #{str}
  </select>
  
  <!-- 동적 SQL -->
  <select id="selectByCondition" resultType="evo" parameterType="map">
  	select * from employees
  	<where>		<!-- test 속성에 있는 이름은 map 안에 있는 key의 값이다. -->
  		<if test="department_id!=0 and department_id!=null">
			department_id = #{department_id} 
  		</if>
  		<if test="job_id!='' and job_id!=null">
			and job_id = #{job_id} 
  		</if>
  		<if test="salary!=0 and salary!=null">
			and salary >= #{salary} 
  		</if>
  		<if test="hire_date!=null">
			and hire_date >= #{hire_date} 
  		</if>
  	</where>
	order by employee_id
  </select>
  
  <!-- 반복 사용하는 문장 : include하기 -->
  <sql id="empQuery">
  	select * from employees
  </sql>
  
  <select id="selectByDeptMany" parameterType="java.util.List" resultType="evo">
  	<include refid="empQuery"/>
  	where department_id in
  	<foreach collection="list" index="index" item="deptlist" open="(" close=")" separator=",">
  		#{deptlist}
  	</foreach>
  	order by employee_id
  </select>
  
  <!-- #{} : getter 이름 -->
  <!-- jdbcType : null을 넣을 때 type ==> sqlConfig.xml로 -->
  <insert id="empInsert" parameterType="evo">
  	insert into employees(employee_id, first_name, last_name, email, phone_number, 
  						hire_date, job_id, salary, commission_pct, manager_id, department_id) 
  	values(#{employee_id}, #{first_name}, #{last_name}, #{email}, #{phone_number}, 
  			#{hire_date}, #{job_id}, #{salary}, #{commission_pct} ,#{manager_id} ,#{department_id})
  </insert>
  
  <update id="empUpdate" parameterType="evo">
  	update employees
	set first_name=#{first_name},
	last_name=#{last_name},
	email=#{email},
	phone_number=#{phone_number},
	hire_date=#{hire_date},
	job_id=#{job_id},
	salary=#{salary},
	commission_pct = #{commission_pct},
	manager_id=#{manager_id},
	department_id=#{department_id}
	where employee_id = #{employee_id}
  </update>
  
  <delete id="empDelete" parameterType="int">
  	delete from employees where employee_id = #{employee_id}
  </delete>
  
</mapper>